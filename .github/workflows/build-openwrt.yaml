# Copyright (c) 2023 LENAR
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
name: Build OpenWrt Firmware

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      branch:
        description: "Source Branch"
        type: choice
        required: true
        options:
          - openwrt-23.05.5
          - openwrt-23.05
          - openwrt-24.10
      config_file:
        description: "Config Name"
        type: choice
        required: true
        options:
          - openwrt.config
      config_link:
        description: "Use Config URL"
        type: boolean
        default: false
      config_url:
        description: "Config URL"
        type: string
        required: false
        default: ""
      diy:
        description: "DIY Script"
        type: choice
        required: true
        options:
          - diy_v1.sh
          - diy_v2.sh
      firmware_release:
        description: "Firmware Release"
        type: boolean
        default: false
      toolchain_release:
        description: "Toolchain Release"
        type: boolean
        default: true
      toolchain_rebuild:
        description: "Force Rebuild Toolchain"
        type: boolean
        default: false
      vermagic:
        description: "Inject official kernel vermagic for kmod compatibility"
        type: boolean
        default: true

env:
  SOURCE_URL: https://github.com/recrumptor/openwrt # URL репозитория OpenWrt для клонирования
  SOURCE_ORIGIN: https://github.com/recrumptor/openwrt # Для слияния upstream изменений
  SOURCE_BRANCH: ${{ github.event.inputs.branch }}
  FEEDS_SH: feeds.sh
  FEEDS_PKG_SH: feeds_pkg.sh
  CONFIG_FILE: ${{ github.event.inputs.config_file }}
  CONFIG_LINK: ${{ github.event.inputs.config_link }}
  CONFIG_URL: ${{ github.event.inputs.config_url }}
  DIY_SH: ${{ github.event.inputs.diy }}
  FIRMWARE_RELEASE: ${{ github.event.inputs.firmware_release }}
  TOOLCHAIN_RELEASE: ${{ github.event.inputs.toolchain_release }}
  TOOLCHAIN_REBUILD: ${{ github.event.inputs.toolchain_rebuild }}
  VERMAGIC: ${{ github.event.inputs.vermagic }}
  TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TZ: UTC

jobs:
  Toolchain:
    name: Build OpenWrt Toolchain
    runs-on: ubuntu-22.04
    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone_openwrt.outputs.OPENWRT_ROOT_PATH }} # Изменено имя ID
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      DEVICE_NAME: ${{ steps.env.outputs.DEVICE_NAME }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}
      BUILD_DATE: ${{ steps.env.outputs.BUILD_DATE }}
      REBUILD_CHECK: ${{ steps.hash.outputs.REBUILD_CHECK }}

    steps:
      - name: Initialize Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          mkdir -p workspace
          df -hT
          ulimit -n 8192

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: '4096'
          temp-reserve-mb: '2048'
          swap-size-mb: '2048'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout Your Repository (to access R281-1 and openwrt directories)
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }} # Клонирует ваш репозиторий в корень GITHUB_WORKSPACE

      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y $(curl -fsSL https://pastebin.com/raw/y5mk4S1a)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          df -hT

      - name: Clone OpenWrt Source Code
        id: clone_openwrt
        run: |
          # Клонируем OpenWrt в workspace/openwrt
          git clone --single-branch "$SOURCE_URL" -b "$SOURCE_BRANCH" workspace/openwrt
          cd workspace/openwrt
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote add upstream "$SOURCE_ORIGIN"
          git fetch upstream "$SOURCE_BRANCH"
          git merge upstream/"$SOURCE_BRANCH"
          echo "OPENWRT_ROOT_PATH=$PWD" >> "$GITHUB_ENV"
          echo "OPENWRT_ROOT_PATH=$PWD" >> "$GITHUB_OUTPUT"
          
      - name: Generate Variables
        id: env
        run: |
          export SOURCE_OWNER=$(echo "$SOURCE_URL" | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> "$GITHUB_ENV"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> "$GITHUB_OUTPUT"
          export SOURCE_REPO=$(echo "$SOURCE_URL" | awk -F '/' '{print $NF}' | sed 's/\.git$//')
          echo "SOURCE_REPO=$SOURCE_REPO" >> "$GITHUB_ENV"
          echo "SOURCE_REPO=$SOURCE_REPO" >> "$GITHUB_OUTPUT"
          
          cd "$OPENWRT_ROOT_PATH"
          export CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> "$GITHUB_ENV"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> "$GITHUB_OUTPUT"
          
          # Необходимо сначала загрузить .config из вашего репозитория, чтобы определить DEVICE_TARGET/SUBTARGET
          if [[ "$CONFIG_LINK" == "true" && -n "$CONFIG_URL" ]]; then
            curl -s "$CONFIG_URL" -o ".config"
          else
            # ИСПРАВЛЕНО: Копируем config файл из вашей директории R281-1/config/
            cp "${{ github.workspace }}/R281-1/config/$CONFIG_FILE" ".config"
          fi
          # Применяем make defconfig, чтобы .config был валидным
          make defconfig
          
          export DEVICE_NAME=$(grep 'CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          echo "DEVICE_NAME=$DEVICE_NAME" >> "$GITHUB_ENV"
          echo "DEVICE_NAME=$DEVICE_NAME" >> "$GITHUB_OUTPUT"
          export DEVICE_PLATFORM=$(grep 'CONFIG_TARGET_ARCH_PACKAGES' .config | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> "$GITHUB_ENV"
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> "$GITHUB_OUTPUT"
          export DEVICE_TARGET=$(grep 'CONFIG_TARGET_BOARD' .config | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> "$GITHUB_ENV"
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> "$GITHUB_OUTPUT"
          export DEVICE_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET' .config | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> "$GITHUB_ENV"
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> "$GITHUB_OUTPUT"
          
          # TOOLCHAIN_IMAGE теперь включает TARGET и SUBTARGET
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> "$GITHUB_ENV"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> "$GITHUB_OUTPUT"
          
          export BUILD_DATE=$(date +"%Y-%m-%d-%H%M")
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_ENV"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_OUTPUT"

      - name: Get Release Hash
        continue-on-error: true
        uses: robinraju/release-downloader@v1.12
        with:
          token: ${{ env.TOKEN }}
          repository: ${{ GITHUB.REPOSITORY }}
          fileName: ${{ env.TOOLCHAIN_IMAGE }}.hash
          tag: toolchain
          out-file-path: .

      - name: Compare Toolchain Hash
        id: hash
        run: |
          if [ -f "${{ env.TOOLCHAIN_IMAGE }}.hash" ]; then
            export CACHE_HASH=$(cat "${{ env.TOOLCHAIN_IMAGE }}.hash")
            echo "Cached hash is $CACHE_HASH"
          else
            echo "No cached hash found"
          fi
          cd "$OPENWRT_ROOT_PATH"
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> "$GITHUB_ENV"
          echo "CURRENT_HASH is $CURRENT_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ] || [ "${{ env.TOOLCHAIN_REBUILD }}" == "true" ]; then
            echo "REBUILD_CHECK=true" >> "$GITHUB_OUTPUT"
          else
            echo "REBUILD_CHECK=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Feeds (Toolchain)
        if: ${{ steps.hash.outputs.REBUILD_CHECK == 'true' }}
        run: |
          echo "Install Feeds Toolchain"
          cd "$OPENWRT_ROOT_PATH"
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Compile Tools
        if: ${{ steps.hash.outputs.REBUILD_CHECK == 'true' }}
        run: |
          cd "$OPENWRT_ROOT_PATH"
          echo -e "$(nproc) Thread Compile"
          make tools/compile -j$(($(nproc) + 1)) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: ${{ steps.hash.outputs.REBUILD_CHECK == 'true' }}
        run: |
          cd "$OPENWRT_ROOT_PATH"
          echo -e "$(nproc) Thread Compile"
          make toolchain/compile -j$(($(nproc) + 1)) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin

      - name: Generate Toolchain Image
        if: ${{ steps.hash.outputs.REBUILD_CHECK == 'true' }}
        run: |
          cd workspace
          mksquashfs openwrt "$TOOLCHAIN_IMAGE" -force-gid 1001 -force-uid 1001 -comp zstd -Xcompression-level 19
          mkdir -p "$GITHUB_WORKSPACE/output"
          split -d -b 1G "$TOOLCHAIN_IMAGE" "$GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.img."
          rm -f "$TOOLCHAIN_IMAGE"
          cd "$OPENWRT_ROOT_PATH"
          echo "$CURRENT_HASH" > "$GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.hash"
          ls -lh "$GITHUB_WORKSPACE/output"

      - name: Upload Toolchain Image To Artifact
        if: ${{ env.TOOLCHAIN_RELEASE != 'true' && steps.hash.outputs.REBUILD_CHECK == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: output
          retention-days: 7

      - name: Delete Old Toolchain Assets From Release
        if: ${{ env.TOOLCHAIN_RELEASE == 'true' && steps.hash.outputs.REBUILD_CHECK == 'true' }}
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ env.TOKEN }}
          tag: toolchain
          assets: ${{ env.TOOLCHAIN_IMAGE }}.*
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Toolchain Image To Release
        if: ${{ env.TOOLCHAIN_RELEASE == 'true' && steps.hash.outputs.REBUILD_CHECK == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.TOKEN }}
          name: "OpenWrt Toolchain - ${{ env.SOURCE_BRANCH }} (${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET}})"
          commit: ${{ env.CURRENT_BRANCH }}
          tag: toolchain
          artifacts: output/*
          replacesArtifacts: true
          allowUpdates: true
          prerelease: true
          body: |
            OpenWrt Toolchain Release
            Branch: ${{ env.SOURCE_BRANCH }}
            Target: ${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}
            Hash: ${{ env.CURRENT_HASH }}
            Build Date: ${{ env.BUILD_DATE }}

  Build:
    needs: [Toolchain]
    runs-on: ubuntu-22.04

    steps:
      - name: Initialize Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          mkdir -p workspace
          df -hT
          ulimit -n 8192

      - name: Restore Variables
        run: |
          echo "OPENWRT_ROOT_PATH=${{ needs.Toolchain.outputs.OPENWRT_ROOT_PATH }}" >> "$GITHUB_ENV"
          echo "SOURCE_OWNER=${{ needs.Toolchain.outputs.SOURCE_OWNER }}" >> "$GITHUB_ENV"
          echo "SOURCE_REPO=${{ needs.Toolchain.outputs.SOURCE_REPO }}" >> "$GITHUB_ENV"
          echo "CURRENT_BRANCH=${{ needs.Toolchain.outputs.CURRENT_BRANCH }}" >> "$GITHUB_ENV"
          echo "DEVICE_NAME=${{ needs.Toolchain.outputs.DEVICE_NAME }}" >> "$GITHUB_ENV"
          echo "DEVICE_PLATFORM=${{ needs.Toolchain.outputs.DEVICE_PLATFORM }}" >> "$GITHUB_ENV"
          echo "DEVICE_TARGET=${{ needs.Toolchain.outputs.DEVICE_TARGET }}" >> "$GITHUB_ENV"
          echo "DEVICE_SUBTARGET=${{ needs.Toolchain.outputs.DEVICE_SUBTARGET }}" >> "$GITHUB_ENV"
          echo "TOOLCHAIN_IMAGE=${{ needs.Toolchain.outputs.TOOLCHAIN_IMAGE }}" >> "$GITHUB_ENV"
          echo "BUILD_DATE=${{ needs.Toolchain.outputs.BUILD_DATE }}" >> "$GITHUB_ENV"
          echo "REBUILD_CHECK=${{ needs.Toolchain.outputs.REBUILD_CHECK }}" >> "$GITHUB_ENV"

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: '4096'
          temp-reserve-mb: '2048'
          swap-size-mb: '2048'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout Your Repository (to access R281-1 and openwrt directories)
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }} # Клонирует ваш репозиторий в корень GITHUB_WORKSPACE

      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y $(curl -fsSL https://pastebin.com/raw/y5mk4S1a)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          df -hT

      - name: Download Toolchain Image From Artifact
        if: ${{ env.TOOLCHAIN_RELEASE != 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: workspace

      - name: Download Toolchain Image From Release
        if: ${{ env.TOOLCHAIN_RELEASE == 'true' }}
        uses: robinraju/release-downloader@v1.12
        with:
          token: ${{ env.TOKEN }}
          repository: ${{ GITHUB.REPOSITORY }}
          fileName: ${{ env.TOOLCHAIN_IMAGE }}.img.*
          tag: toolchain
          out-file-path: workspace

      - name: Prepare Toolchain Image
        run: |
          cd workspace
          for i in {00..09}; do
            if [ -f "$TOOLCHAIN_IMAGE.img.$i" ]; then
              cat "$TOOLCHAIN_IMAGE.img.$i" >> "$TOOLCHAIN_IMAGE.img"
              rm -f "$TOOLCHAIN_IMAGE.img.$i"
            fi
          done
          mkdir -p openwrt-ro openwrt workdir overlay
          sudo mount -o loop "$TOOLCHAIN_IMAGE.img" openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          # Важно: OPENWRT_ROOT_PATH теперь указывает на смонтированную директорию
          echo "OPENWRT_ROOT_PATH=$(realpath openwrt)" >> "$GITHUB_ENV"
          echo "Toolchain prepared and mounted to $(realpath openwrt)"

      - name: Update Source Code (inside mounted toolchain)
        run: |
          cd "$OPENWRT_ROOT_PATH"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch upstream "$SOURCE_BRANCH"
          git merge upstream/"$SOURCE_BRANCH"

      - name: Load Custom Configuration
        run: |
          cd "$OPENWRT_ROOT_PATH"
          if [[ "$CONFIG_LINK" == "true" && -n "$CONFIG_URL" ]]; then
            curl -s "$CONFIG_URL" -o ".config"
          else
            # ИСПРАВЛЕНО: Копируем config файл из вашей директории R281-1/config/
            cp "${{ github.workspace }}/R281-1/config/$CONFIG_FILE" ".config"
          fi
          make defconfig

      - name: Inject Correct Kernel Vermagic from official source
        if: ${{ env.VERMAGIC == 'true' }}
        run: |
          # ИСПРАВЛЕНО: Копируем скрипт vermagic_update.sh в OPENWRT_ROOT_PATH
          cp "${{ github.workspace }}/openwrt/vermagic_update.sh" "$OPENWRT_ROOT_PATH/vermagic_update.sh"
          cd "$OPENWRT_ROOT_PATH"
          chmod +x ./vermagic_update.sh
          # Параметры: DEVICE_TARGET, DEVICE_SUBTARGET
          ./vermagic_update.sh ${{ env.DEVICE_TARGET }} ${{ env.DEVICE_SUBTARGET }}
        env:
          # Можно указать явно URL снапшотов OpenWrt, если нужно отличное от downloads.openwrt.org
          REPO_URL: https://downloads.openwrt.org/snapshots/ 

      - name: Load Custom Feeds
        run: |
          # ИСПРАВЛЕНО: Копируем feeds.sh из вашей директории R281-1/scripts/
          cp "${{ github.workspace }}/R281-1/scripts/$FEEDS_SH" "$OPENWRT_ROOT_PATH/$FEEDS_SH"
          cd "$OPENWRT_ROOT_PATH"
          chmod +x "./$FEEDS_SH" && "./$FEEDS_SH"

      - name: Install Feeds
        run: |
          cd "$OPENWRT_ROOT_PATH"
          
          ./scripts/feeds clean

          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999

          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ "$RETRY_COUNT" -lt "$MAX_RETRIES" ]; do
              echo "--- Попытка обновления фидов $((RETRY_COUNT + 1)) из $MAX_RETRIES ---"
              if ./scripts/feeds update -a V=s; then
                  echo "feeds update -a успешно завершено."
                  break
              else
                  echo "feeds update -a завершилось ошибкой. Повтор через 15 секунд..."
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  sleep 15
              fi
          done

          if [ "$RETRY_COUNT" -eq "$MAX_RETRIES" ]; then
              echo "feeds update -a не удалось после $MAX_RETRIES попыток. Прерываю сборку."
              exit 1
          fi

          # ИСПРАВЛЕНО: Копируем feeds_pkg.sh из вашей директории R281-1/scripts/
          cp "${{ github.workspace }}/R281-1/scripts/$FEEDS_PKG_SH" "$OPENWRT_ROOT_PATH/$FEEDS_PKG_SH"
          # Теперь выполняем его из OpenWrt ROOT_PATH
          chmod +x "./$FEEDS_PKG_SH" && "./$FEEDS_PKG_SH"

          ./scripts/feeds install -a V=s

      - name: Upload Config To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Config
          path: ${{ env.OPENWRT_ROOT_PATH }}/.config
          include-hidden-files: true
          retention-days: 7

      - name: Load DIY
        run: |
          # ИСПРАВЛЕНО: Копируем DIY скрипт из вашей директории R281-1/scripts/
          cp "${{ github.workspace }}/R281-1/scripts/$DIY_SH" "$OPENWRT_ROOT_PATH/$DIY_SH"
          
          # ИСПРАВЛЕНО: Предполагаем, что custom находится в R281-1/custom/
          if [ -d "${{ github.workspace }}/R281-1/custom" ]; then
            mv "${{ github.workspace }}/R281-1/custom" "$OPENWRT_ROOT_PATH/custom"
          fi
          
          cd "$OPENWRT_ROOT_PATH"
          chmod +x "./$DIY_SH" && "./$DIY_SH"

      - name: Download Packages
        id: download
        run: |
          cd "$OPENWRT_ROOT_PATH"
          make download -j10 || make download -j10 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Packages
        run: |
          cd "$OPENWRT_ROOT_PATH"
          echo -e "$(nproc) Thread Compile"
          make clean
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(($(nproc) + 1)) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(($(nproc) + 1)) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Get Compiled Kernel Vermagic
        run: |
          cd "$OPENWRT_ROOT_PATH"
          
          BUILD_DIR_PATH="build_dir/target-${{ env.DEVICE_PLATFORM }}/linux-${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}"
          
          KERNEL_DIR=$(find "$BUILD_DIR_PATH" -maxdepth 1 -type d -name "linux-*" | head -n 1)

          if [ -z "$KERNEL_DIR" ]; then
            echo "Ошибка: KERNEL_DIR не найдена. Ожидаемый путь: '$BUILD_DIR_PATH/linux-*'."
            echo "Пожалуйста, проверьте содержимое '$BUILD_DIR_PATH/' для отладки:"
            ls -R "$BUILD_DIR_PATH"/ || true
            exit 1
          fi
          echo "Отладка: Обнаружена директория KERNEL_DIR: $KERNEL_DIR"
          
          if [ -f "$KERNEL_DIR/.vermagic" ]; then
            echo "--- VERMAGIC из файла .vermagic (ОСНОВНОЙ) ---"
            VERMAGIC_FROM_FILE=$(cat "$KERNEL_DIR/.vermagic")
            echo "$VERMAGIC_FROM_FILE"
            echo "build_vermagic=$VERMAGIC_FROM_FILE" >> "$GITHUB_OUTPUT"
          else
            echo "Внимание: Файл .vermagic не найден в "$KERNEL_DIR". Попытка извлечь из kmod."
          fi

          TUN_IPK_PATH="bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/packages"
          TUN_IPK_FILE=$(find "$TUN_IPK_PATH" -name "kmod-tun_*.ipk" | head -n 1)

          if [ -n "$TUN_IPK_FILE" ]; then
            echo "--- VERMAGIC из kmod-tun.ko (ДОПОЛНИТЕЛЬНЫЙ) ---"
            mkdir -p ./tmp_mod_extract/
            
            tar -xf "$TUN_IPK_FILE" -C ./tmp_mod_extract/
            
            if [ ! -f ./tmp_mod_extract/data.tar.gz ]; then
              echo "Ошибка: data.tar.gz не найден после распаковки IPK. Проверьте структуру IPK: $TUN_IPK_FILE"
              rm -rf ./tmp_mod_extract/
              exit 1
            fi

            tar -xzf ./tmp_mod_extract/data.tar.gz -C ./tmp_mod_extract/
            
            TUN_KO=$(find ./tmp_mod_extract/ -name "tun.ko" | head -n 1)
            
            if [ -n "$TUN_KO" ]; then
                VERMAGIC_STRING=""
                if command -v modinfo &> /dev/null; then
                    VERMAGIC_STRING=$(modinfo "$TUN_KO" | grep ^vermagic | awk '{print $2}')
                    echo "Vermagic (через modinfo): $VERMAGIC_STRING"
                else
                    VERMAGIC_STRING=$(strings "$TUN_KO" | grep -oE '^5\.15\.[0-9]+[^ ]*' | head -n 1)
                    echo "Vermagic (через strings): $VERMAGIC_STRING"
                fi
                
                echo "build_vermagic_from_kmod=$VERMAGIC_STRING" >> "$GITHUB_OUTPUT"
            else
                echo "Внимание: tun.ko не найден внутри распакованного IPK."
            fi
            rm -rf ./tmp_mod_extract/ control.tar.gz data.tar.gz
          else
            echo "Внимание: IPK kmod-tun не найден. Невозможно извлечь vermagic из модуля. Убедитесь, что CONFIG_PACKAGE_kmod-tun=m находится в .config."
          fi
          
      - name: Generate Firmware
        id: generate
        run: |
          cd "$OPENWRT_ROOT_PATH"
          make package/install -j$(($(nproc) + 1)) || make package/install -j1 V=s
          make target/install -j$(($(nproc) + 1)) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: Upload Bin To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-${{ env.DEVICE_NAME }}-${{ env.BUILD_DATE }}
          path: ${{ env.OPENWRT_ROOT_PATH }}/bin
          retention-days: 7

      - name: Organize Files
        if: ${{ env.FIRMWARE_RELEASE == 'true' }}
        run: |
          cd "$OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET"
          rm -rf packages feeds.buildinfo profiles.json version.buildinfo
          df -hT "$PWD"

      - name: Deploy Files To Release
        if: ${{ env.FIRMWARE_RELEASE == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.TOKEN }}
          name: ${{ env.SOURCE_REPO }}_${{ env.SOURCE_BRANCH }}
          commit: ${{ env.CURRENT_BRANCH }}
          tag: ${{ env.SOURCE_REPO }}_${{ env.SOURCE_BRANCH }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
          replacesArtifacts: true
          allowUpdates: true
          prerelease: false
          body: |
            ### Build Information
            ---
            - Source Code: ${{ env.SOURCE_URL }}
            - Source Code Branch: ${{ env.SOURCE_BRANCH }}
            - Device Platform: ${{ env.DEVICE_PLATFORM }}
            - Device Target: ${{ env.DEVICE_TARGET }}
            - Device Subtarget: ${{ env.DEVICE_SUBTARGET }}
            - Device Name: ${{ env.DEVICE_NAME }}
            - Build Date: ${{ env.BUILD_DATE }}
